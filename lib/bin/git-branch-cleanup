#!/usr/bin/env bash

runcmd() {
  echo + "$@" >&2
  if [[ -z "$DRY_RUN" ]]; then
    "$@"
  else
    return 0
  fi
}

git_branches() {
  git for-each-ref --format='%(refname)' refs/heads/ "$@" | perl -pe 's@^refs/heads/@@'
}

orphaned_branches() {
  for branch in $(git_branches); do
    remote=$(git config --local "branch.$branch.remote" || echo '')
    remote_branch=$(git config --local "branch.$branch.merge" | perl -pe 's@^refs/heads/@@' || echo '')
    if [[ -n $remote ]] && [[ -n $remote_branch ]]; then
      if ! git rev-parse "refs/remotes/$remote/$remote_branch" &> /dev/null; then
        echo "$branch"
      fi
    fi
  done
}

default_branches() {
  for remote in $(git remote); do
    git remote set-head --auto "$remote" &> /dev/null
    git rev-parse --abbrev-ref "$remote/HEAD" | perl -e 'while(<STDIN>) { s@\Q$ARGV[0]/@@; print }' "$remote"
  done
}

deletable_branches() {
  git_branches --merged "$@"
  orphaned_branches
}

ignorable_branches() {
  git rev-parse --abbrev-ref HEAD
  default_branches
}

branches_to_delete() {
  comm -23 <(deletable_branches "$@" | sort) <(ignorable_branches | sort) | uniq
}

for branch in $(branches_to_delete "$@"); do
  runcmd git branch --delete --force "$branch"
done
